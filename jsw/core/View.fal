export View

load .Template
load .Service
load library.File

/**
 * Base class for views.
 *
 * Use View.factory() to instantiate views.
 *
 * @author 	Vladimir Florentino
 * @package Jigsaw
 * @since 	0.1.0
 * @begin 	2009.4.13
 *
 * @param Jig jig  - The Jig that owns this view.
 */
class View(jig) from Service(jig)

	//! Name of the template we want to show.
	_templateName = Framework.defaultTemplate

	//! The template object.
	_template = nil
	
	/**
	 * Called by the framework to process this view.
	 *
	 * @return Template
	 */
	function execute()
		if not self._template
			self.process()

			self._template = Template.factory(self.getJig(), self._templateName)
			self.copyValuesTo(self._template)
		end
		
		return self._template
	end

	/**
	 * Process this view's logic.
	 *
	 * @return nil
	 */
	function process()
		raise Error(-1000, 'You must redifine the View.process() method.')
	end

	/**
	 * Set the name of the view we want to display.
	 *
	 * @public
	 * @param 	string tplName - Name of the template file we want, minus ext.
	 * @param 	string subTemplate [optional] - Name of templates' sub template.
	 * @return 	nil
	 */
	function setTemplate(tplName, subTemplate)
		// Make sure the template exists.
		if not Template.exists(self.getJig().getName(), tplName)
			raise Error(0, 'Template "' + tplName + '" does not exist.')
		end

			// Make sure the sub template exists.
		if subTemplate and not Template.exists(self._jig.getName(), subTemplate)
			raise Error(0, 'Sub template "' + subTemplate + '" does not exist.')
		end

		self._templateName = tplName
		self.setValue('SUB_TEMPLATE', subTemplate)
	end

	/**************************** STATICS ********************************/

	/**
	 * Check if a view exists.
	 *
	 * @static
	 * @public
	 * @param	string jigName - Name of jig where to search for the template.
	 * @param 	string name - Name of the view class to check.
	 * @return	boolean
	 */
	function exists(jigName, name)
		return File.exists(View.getFullPath(jigName, name))
	end

	/**
	 * Get a view handler instance based on it's class name.
	 *
	 * @static
	 * @param 	string jig - The name of the owning Jig.
	 * @param 	string className - The class name of the view to create.
	 * @return	View
	 */
	function factory(jig, className)
		filename = View.getFullPath(jig.getName(), className)	

		// Return the instance
		dict = [className => nil]
		include(filename, 'utf-8', nil, dict)
		
		// Return the instance.
		return dict[className](jig)
	end

	/**
	 * Get the full path to an view class file.
	 *
	 * @static
	 * @param 	string jigName - Name of jig where to search to action class.
	 * @param 	string className - Name of view class.
	 * @return 	string
	 */
	function getFullPath(jigName, className)
		return Service.getFullPath(jigName, 
								   Framework.dirViews, 
								   className,
								   Framework.extFalcon)
	end
end
