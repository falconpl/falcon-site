export Service

/**
 * Base class for core request classes.
 *
 * @author 	Vladimir Florentino
 * @package Jigsaw
 * @since 	0.1.0
 * @begin 	2009.5.12h
 */
class Service(jig)
	//! One of my jobs is to hold data.
	_data = [=>]

	//! The jig that will handle the request.
	_jig = jig

	/**
	 * Set the list of mistakes that were made during the request.
	 *
	 * @param 	List list - The list of mistakes made.
	 * @return 	nil
	 */
	function setMistakes(list)
		mistakes = nil
		try	: mistakes = self._data[Framework.keyMistake] 

		if mistakes 
			// Add to the list of mistakes we already have.
			for i in list
				mistakes.push(i)
			end
		else
			mistakes = list
		end

		self._data[Framework.keyMistake] = mistakes
	end

	/**
	 * Get a Request variable.
	 *
	 * @param 	string key - The key of the data to fetch.
	 * @return 	string
	 */
	function arg(key)
		return Request.getField(key, nil)
	end


	/**
	 * Set data to make available to the templates.
	 *
	 * @param 	string key - The key to give the data.
	 * @param 	mixed value - The value to set at the key.
	 * @return 	nil
	 */
	function setValue(key, value)
		self._data[key] = value
	end

	/**
	 * Get data previously set.
	 *
	 * @public
	 * @param 	string key - The key of the data to get.
	 * @return 	mixed
	 */
	function getValue(key)
		return self._data[key]
	end

	/**
	 * Get all values.
	 *
	 * @public
	 * @return 	mixed
	 */
	function getValuesDict()
		return self._data
	end

	/**
	 * Set all values.
	 *
	 * @public
	 * @param	Dictionary dict
	 * @return 	nil
	 */
	function setValuesDict(dict)
		self._data = dict
	end

	/**
	 * Copy to the values to another service class.
	 *
	 * @public
	 * @param Service dest - The place where to copy the value.
	 */
	function copyValuesTo(dest)
		for key, value in self._data
			dest.setValue(key, value)
		end
	end

	/**
	 * Get the current Jig.
	 *
	 * @public
	 * @return Jig
	 */
	function getJig()
		return self._jig
	end

	/**
	 * Set the current Jig.
	 *
	 * @public
	 * @param 	Jig jig
	 * @return  Jig
	 */
	function setJig(jig)
		self._jig = jig
	end

	/**************************** STATICS ********************************/

	/**
	 * Get the full path to a service file.
	 *
	 * @static
	 * @param 	string jigName - Name of jig where to search to action class.
	 * @param 	string resourceDir [optional] - Relative directory where resource is found.
	 * @param 	string name [optional] - Name of resource for which to get path.
	 * @param 	string ext [optional] - File extension of resource.
	 * @return 	string
	 */
	function getFullPath(jigName, resourceDir, name, ext)
		filename  = Config.installPath + '/' + Framework.dirJigs + jigName + '/'
		if resourceDir  : filename += resourceDir
		if name 		: filename += name
		if ext  		: filename += ext

		return filename
	end

end


