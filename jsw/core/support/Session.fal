export Session

load core.Jig
load library.File

//! How much jibberish to add to the session id to make it encrypted.
const SALT_STRENGTH = 64

//! How many seconds to wait before updating the sessionID's timestap.
//! If the current sessionID's ts is within this time, it won't be updated;
//! older sessions than this threshold will always be updated.
//! This prevents multiple updates quickly if the user spams the refresh button.
const SECS_UPDATE_THRESHOLD = 30

//! Session ID creation policy.
const NO_CREATE_ID 		= 1
const FORCE_RECREATE_ID	= 2

/**
 * Handles the Framework's session management.
 *
 * @author 	Vladimir Florentino
 * @package Jigsaw
 * @since 	0.1.0
 * @begin 	2009.5.14
 */
object Session
	//! The session data.
	static data_ = nil

	//! Has the sessin changed.
	static changed_ = 0

	//! Name of current running jig.
	static jigName_ = nil

	/**
	 * Get a session variable.
	 *
	 * @static
	 * @public
	 * @param 	string key - The name of the session variable.
	 * @return 	mixed
	 */
	function get(key)
		val = nil
		try : val = Session.data_[key]
		return val
	end

	/**
	 * Set a session variable.
	 *
	 * @static
	 * @public
	 * @param 	string key - The name of the session variable.
	 * @param 	mixed value - The value of the variable.
	 * @return 	nil
	 */
	function set(key, value)
		Session.data_[key] = value
		Session.changed_ = true
	end

	/**
	 * Destroys a session, forcing all it's data to be wiped out.
	 *
	 * @static
	 * @public
	 * @return 	nil
	 */
	function destroy()
		path = Session.getSessionPath(NO_CREATE_ID)
		if not path : return
		File.remove(path)
		Session.start(Session.jigName_)
	end

	/**
	 * Starts the session management.
	 *
	 * @static
	 * @param 	string jigName 
	 * @public
	 * @return 	nil
	 */
	function start(jigName)
		Session.jigName_ = jigName

		// Grab any session data we may have.
		path = Session.getSessionPath(NO_CREATE_ID)

		// Recreate the session if we have a session id but no session 
		// file, or if the user doesn't have a session, yet.
		if not path or (path and not File.exists(path))
			path = Session.getSessionPath(FORCE_RECREATE_ID)
		end

		// Grab the actual session data from the session file.
		if path : Session.data_ = File.deserialize(path)

		// Create the data store if needed.
		if not Session.data_ : Session.data_ = [=>]
	end
	
	/**
	 * Saves the current session.
	 *
	 * @static
	 * @public
	 * @return nil
	 */
	function commit()
		// Prune the expired sessions, maybe.
		// Simple algo to determine the chance that we will prune the
		// expired sessions from the filesystem. 100 means always, 0 
		// means never, 30% means 1 out of every 3 chances, etc.
		chance = Config.sessionGcChance
		if chance > 100 : chance = 100
		if chance < 0   :   chance = 0
		rand = random(0, 99)
		if rand < chance
			Session.pruneOldSessions_()
		end

		// Write the session to disk, if it changed.
		if Session.changed_
			path = Session.getSessionPath(NO_CREATE_ID)
			if path : File.serialize(path, Session.data_)
		end

		// Update the timestamp of the user's session.
		Session.updateTimeStamp_()
	end

	/**
	 * Revert any changes made since the session started.
	 *
	 * @static
	 * @public
	 * @param string jigName [optional] - Name of new owning jig.
	 * @return nil
	 */
	function rollback(jigName)
		if jigName : Session.jigName_ = jigName
		Session.changed_ = false

		// This will discard the current data and re-read the previous.
		Session.start(Session.jigName_)
	end

	/**
	 * Get the path to where a session is located.
	 *
	 * @static
	 * @public
	 * @param 	const createPolicy - How to handle the creation of sessionIDs.
	 * @return 	string
	 */
	function getSessionPath(createPolicy)
		sessionID = nil
		cookieID  = Framework.keySessionID  + Session.jigName_
		exist 	  =  cookieID in Request.cookies
		if not exist and (createPolicy == NO_CREATE_ID)
			return nil
		end

		if not exist or (createPolicy == FORCE_RECREATE_ID)
			// Create a random first part of the filename.
			// Exclude _ and from the name generation.
			sessionID = File.getRandomName(SALT_STRENGTH, ['_', '.'])
			ts = TimeStamp()
			ts.currentTime()
			sessionID += '_' + ts.toLongFormat()

			// Set the cookie.
			Reply.setCookie(cookieID, sessionID)
			Request.cookies[cookieID] =  sessionID
		else
			sessionID = Request.cookies[cookieID]
		end

		path  = Config.installPath + '/' + Framework.dirSessions 
		path += sessionID + Framework.extSession

		return path
	end

	/**
	 * Update the timestamp of the user's session.
	 *
	 * This prevents it from being removed when expired sessions 
	 * are pruned. This method updates both the filename and cookie id.
	 *
	 * @static
	 * @private
	 * @return 	nil
	 */
	function updateTimeStamp_()
		oldPath = Session.getSessionPath(NO_CREATE_ID)
		if not oldPath : return

		cookieID  = Framework.keySessionID  + Session.jigName_
		try
			// Split the salt from the timestamp.
			oldSessionID = Request.cookies[cookieID]	
			salt, ts = strSplit(oldSessionID.toString(), '_', 2)	

			if salt.len() < SALT_STRENGTH
				raise Error(0, 'Invalid Session Salt')
			end
		catch in e
			// Reset the cookies.
			Reply.setCookie(cookieID, nil)
			dictRemove(Request.cookies, cookieID)
			newSessionID = Session.getSessionPath(FORCE_RECREATE_ID)
			try 
				salt, ts = strSplit(newSessionID.toString(), '_', 2)	
			catch
				return
			end
		end

		// Create a TimeStamp from the sessionID's ts string.
		time = strBackTrim(ts, Framework.extSession)
		ts = TimeStamp()
		ts.fromLongFormat(int(time))

		now = TimeStamp()
		threshold = TimeStamp()

		now.currentTime()
		threshold.second = SECS_UPDATE_THRESHOLD
		ts.add(threshold)

		// Don't update the timestamp if we haven't met the minimum time
	    // span before session ids can be updated.
		if ts >= now 
			return
		end

		// Create new session id: Add the current timestamp to the old salt.
		newSessionID = salt + '_' + now.toLongFormat()

		// Set the new session id into the cookie.
		Reply.setCookie(cookieID, newSessionID)
		Request.cookies[cookieID] =  newSessionID

		newPath =  Session.getSessionPath(NO_CREATE_ID)

		// Rename the old session file.
		try : fileMove(oldPath, newPath)
	end

	/**
	 * Prune expired sessions.
	 *
	 * @static
	 * @private
	 * @return 	nil
	 */
	function pruneOldSessions_()
		path    = Config.installPath + '/' + Framework.dirSessions
		dir     = Directory(path)

		// Get the session lifetime, in hours and minutes.
		hours   =  int(Config.sessionLifetime / 60)
		if hours > 24 : hours = 24
		minutes =  (Config.sessionLifetime % 60)

		subtract = TimeStamp()
		subtract.hour   = -hours
		subtract.minute = -minutes

		// Sessions >= to this are considered expired.
		expired = TimeStamp()
		expired.currentTime()
		expired.add(subtract)

		// Look for sessions to prune.
		while (entry = dir.read()) != nil
			if entry == '.' or entry == '..' : continue
			try
				salt, ts = strSplit(entry.toString(), '_', 2)	
			catch AccessError
				continue
			end

			// Create a TimeStamp from the filename's ts string.
			time = strBackTrim(ts, Framework.extSession)
			ts = TimeStamp()
			ts.fromLongFormat(int(time))

			// Do the pruning of old sessions.
			if ts < expired
				fileRemove(path + entry)
			end
		end
	end
end

