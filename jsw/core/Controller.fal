export Controller

load compiler
load .Action
load .Service
load .Security
load .SecurityError
load .Warp
load library.File

/**
 * Base class for controllers.
 *
 * Use Controller.factory() to instantiate controllers.
 *
 * @author 	Vladimir Florentino
 * @package Taskmill
 * @since 	0.1.0
 * @begin 	2009.5.11
 */
class Controller(jig, actionName) from Service(jig)
	//! Name of action to execute.
	_actionName = actionName

 	//! The action that summoned this controller.
	_action = nil

	/**
	 * Verify current request.
	 *
	 * @return boolean
	 */
	function verify()
		raise Error(0, 'You must redefine Controller.verify()')
	end

	/**
	 * Called when verify() returns false.
	 *
	 * @return nil
	 */
	 function failure()
	 end

	/**
	 * Called when verify() returns true.
	 *
	 * @return nil
	 */
	function success()
	end

	/**
	 * Called by the framework to execute this controller.
	 *
	 * @return action
	 */
	function execute()
		if not self._action
			// Instance the page's action handler.
			self._action = Action.factory(self.getJig(), self._actionName)

			// Run the controller main functions.
			if self.verify()
				self.success()
			else
				self.failure()
			end

			// Copy my values to the action.
			self.copyValuesTo(self._action)
		end

		return self._action
	end

	/**
	 * Set the name of the view we want to run.
	 *
	 * @param 	string className - The name of the view class to set.
	 * @return 	nil
	 */
	function setView(className)
		self._action.setView(className)
	end

	/**
	 * Change the action that is currently set to run.
	 *
	 * @param 	string className - The name of the action class to set.
	 * @return 	nil
	 */
	function setAction(className)
		viewName  = self._action.getView()
		className = Action.toActionClassName(className)
		if not Action.exists(self.getJig().getName(), className)
			raise Error(0, 'Invalid class name.')
		end

		self._actionName = className
		self._action = Action.factory(self.getJig(), self._actionName)
	end

	/**
	 * Perform an HTTP redirect.
	 *
	 * This functions raises an object to perform redirection.
	 * The current Controller or Action handler stops execution 
	 * at the point where this function is called.
	 *
	 * @public
	 * @param	string location - The location to redirect.
	 * @return  nil
	 */
	function redirect(location)
		if location == '' : location = '/'
		raise Warp(URL(location))	
	end

	/**************************** STATICS ********************************/

	/**
	 * Check if a controller exists.
	 *
	 * @static
	 * @public
	 * @param	string jigName - Name of jig where to search for the controller.
	 * @param 	string 	name - Name of the controller file to check.
	 * @return	boolean
	 */
	function exists(jigName, name)
		filename = Controller.getFullPath(jigName, name)
		return File.exists(filename)
	end

	/**
	 * Get a view handler instance based on it's class name.
	 *
	 * @static
	 * @param 	Jig jig - The jig that owns the controller.
	 * @param 	string actionName - The name of action that summoned this controller.
	 * @return	Controller
	 */
	function factory(jig, actionName)
		// Get some info out of the action class, without instantiating it.
		filename = Action.getFullPath(jig.getName(), actionName)

		// If the action is in a sub directory of actions/
		// the name will be in the form 'sub/dir/FooAction'
		actionClassName = strSplit(actionName, '/')	
		actionClassName = arrayTail(actionClassName)

		info = [actionClassName => nil]	
		include(filename, 'utf-8', nil, info)

		actionClass = info[actionClassName]

		// Name of the action's controller.
		ctrlName = actionClass.controller

		// Make sure the request method for the action is honored.
		if not Security.verifyRequestMethod(actionClass.requestMethod)
			raise SecurityError(SecurityError.BAD_REQUEST_METHOD, Request.method)
		end

		// Grab a ref to the controller.
		filename = Controller.getFullPath(jig.getName(), ctrlName)
		info = [ctrlName => nil]
		include(filename, 'utf-8', nil, info)

		// Return the instance.
		return info[ctrlName](jig, actionName)
	end

	/**
	 * Get the full path to a controller class file.
	 *
	 * @static
	 * @param 	string jigName - Name of jig where to search to action class.
	 * @param 	string className - Name of controller class.
	 * @return 	string
	 */
	function getFullPath(jigName, className)
		return Service.getFullPath(jigName, 
								   Framework.dirControllers, 
								   className,
								   Framework.extFalcon)
	end
end

