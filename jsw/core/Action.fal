// Export everything in this file.
export

load .SecurityError
load .View
load .Warp
load library.File
load library.String

import URL from core.support.URL 

/**
 * Base class for action handlers.
 *
 * Use Action.factory() to instantiate actions.
 *
 * @author 	Vladimir Florentino
 * @package Jigsaw
 * @since 	0.1.0
 * @begin 	2009.4.13
 */
class Action(jig, ctrlName) from Service(jig)
	//! Name of the controller that will control this action.
	_controllerName = ctrlName

	//! Name of the view we will run.
	_viewName = Framework.defaultView

	//! Name of default controller.
	//! Actions should change this to set their controller.
	//! NOTE: This is set at the bottom of the file, below
	//! the class definition, because Falcon doesn't like it here.
	static controller = nil

	//! The type of request that we allow this action to handle.
	//! Can be one  of Action.POST,  Action.GET, Action.GET_POST
	//! Actions should change this to set the Request method they allow.
	static requestMethod = 1 // Action.GET

	//! Normal request can be made.
	static GET  = 1

	//! Only Form Post can be made; essetially, a form handler.
	static POST = 2

	//! Both POST and GET request can be made to this action.
	static GET_AND_POST = 3


	/**
	 * Verify this action.
	 *
	 * @public
	 * @return boolean
	 */
	function verify()
		return true
	end

	/**
	 * Called when verify() returns false.
	 *
	 * @return nil
	 */
	 function failure()
	 end

	/**
	 * Called when verify() returns true.
	 *
	 * @return nil
	 */
	function success()
	end

	/**
	 * Get the name of the view we'll run.
	 *
	 * @return string
	 */
	function getView()
		return self._viewName
	end

	/**
	 * Set the name of the view we want to run.
	 *
	 * @param 	string className - The name of the view class to set.
	 * @return 	nil
	 */
	function setView(className)
		// Make sure this view exists.
		if not View.exists(self.getJig().getName(), className)
			raise Error(0, 'View "' + className + '" does not exist.')
		end

		self._viewName = className 
	end

	/**
	 * Called by the framework to process this action.
	 *
	 * @return View
	 */
	function execute()
		if self.verify()
			self.success()

			// Make sure the developer is redirecting if this action is
			// handling a POST.
			// We allow the fallback Jig to bypass this check so that
			// we don't get stuck not having an executable action.
			if Request.method == 'POST' and self.getJig().getName() != Framework.fallbackJig
				// The user should have warped on success, which means this
				// 'if' wouldn't have been reached. This is an error.
				raise SecurityError(SecurityError.POST_NOT_REDIRECTED)
			end
		else
			self.failure()
		end

		// Instantiate the view to return.
		view = View.factory(self.getJig(), self._viewName)
		self.copyValuesTo(view)

		return view
	end

	/**
	 * Perform an HTTP redirect.
	 *
	 * This functions raises an object to perform redirection.
	 * The current Controller or Action handler stops execution 
	 * at the point where this function is called.
	 *
	 * @public
	 * @param	string location - The location to redirect.
	 * @param	Dictionary params [optional]
	 * @return  nil
	 */
	function redirect(location, params)
		if location == '' : location = '/'
		raise Warp(URL(location, params))	
	end
	

	/**************************** STATICS ********************************/

	/**
	 * Check if an action exists.
	 *
	 * @static
	 * @public
	 * @param	string jigName - Name of jig where to search for the action.
	 * @param 	string className - Name of the class file to check.
	 * @return	boolean
	 */
	function exists(jigName, className)
		return File.exists(Action.getFullPath(jigName, className))
	end

	/**
	 * Get an action handler instance based on it's class name.
	 *
	 * @static
	 * @param 	Jig jig - The owing jig.
	 * @param 	className - The name of the class for which to get the handler.
	 * @return	Action
	 */
	function factory(jig, className)
		filename = Action.getFullPath(jig.getName(), className)

		// If the action is in a sub directory of actions/
		// the name will be in the form 'sub/dir/FooAction'
		actionClassName = strSplit(className, '/')	
		actionClassName = arrayTail(actionClassName)

		dict = [actionClassName => nil]

		try
			include(filename, 'utf-8', nil, dict)


			// Return the instance.
			return dict[actionClassName](jig)

		catch Error in e
			> '<br />'
			> '<b>Invalid Action class.</b>'
			> '<br /><br />'
			> '<pre>'
			>> e
			> '</pre>'
		end

		return nil
	end

	/**
	 * Get the full path to an action class file.
	 *
	 * @static
	 * @param 	string jigName - Name of jig where to search to action class.
	 * @param 	string className - Name of action class.
	 * @return 	string
	 */
	function getFullPath(jigName, className)
		return Service.getFullPath(jigName, 
								   Framework.dirActions, 
								   className,
								   Framework.extFalcon)
	end

	/**
	 * Convert a short name, as past via the URL, to an action class name.
	 *
	 * @static
	 * @param string shortName - The short name to convert.
	 * @return string
	 */
	function toActionClassName(shortName)
		// Split at '.' boundary.
		parts = strSplit(shortName, '.')
		name = parts[parts.len() - 1]

		// The past piece is the action name.
		name = String.firstUpper(name)

		// Add the word 'Action' to the end of the class name if needed.
		if strFind(name, 'Action') == -1
			name += 'Action'
		end

		if parts.len() > 1
			arrayTail(parts) // Remove the action name.
			for v in parts : name = v + '/' + name
		end

		return name
	end
end

Action.controller 		= Framework.defaultController
