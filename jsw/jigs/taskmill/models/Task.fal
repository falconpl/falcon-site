export Task

/**
 * Create, Get or Set information for one task.
 *
 * @author 	Vladjmir Florentino
 * @package Taskmill
 * @since 	0.1.0
 * @begin 	2009.5.22
 */
class Task(taskId)
	id 		 	 = 0
	dateCreated  = ''
	dateUpdated  = ''
	priority 	 = ''
	status 	 	 = ''
	statusColor	 = ''
	release  	 = ''
	category 	 = ''
	reporter 	 = ''
	closed		 = false
	assigned 	 = []

	// Set these to create new task.
	projectId	 = 0
	priorityId	 = 0
	statusId	 = 0
	releaseId	 = 0
	categoryId	 = 0
	reporterId	 = 0
	assignedId	 = []
	summary  	 = ''
	description	 = ''

	/**
	 * Constructor.
	 */
	init
		if taskId : self._fill(taskId)
	end

	/**
	 * Load the data for this task.
	 *
	 * @private
	 * @return nil
	 */
	function _fill(taskId)
		// Get the task information.
		query  = 'SELECT Task.id 			AS id, '
		query += '       Task.projectId		AS projectId, '
		query += '       Task.summary 		AS summary, '
		query += '       Task.description	AS description, '
		query += '       Task.dateCreated	AS dateCreated, '
		query += '       Task.dateUpdated	AS dateUpdated, '
		query += '		 TaskPriority.name 	AS priority, '
		query += '		 TaskPriority.id 	AS priorityId, '
		query += '		 TaskStatus.name 	AS status,  '
		query += '		 TaskStatus.id 		AS statusId,  '
		query += '		 TaskStatus.color	AS statusColor,  '
		query += '		 TaskRelease.name 	AS `release`, '
		query += '		 TaskRelease.id 	AS releaseId, '
		query += '		 TaskCategory.name 	AS category, '
		query += '		 TaskCategory.id 	AS categoryId, '
		query += '		 UserExt.fullname 	AS reporter, '
		query += '		 UserExt.userId 	AS reporterId '
		query += 'FROM Task '
	   	query += 'JOIN TaskPriority ON (Task.priorityId = TaskPriority.id) '
	   	query += 'JOIN TaskStatus 	ON (Task.statusId 	= TaskStatus.id) '
	   	query += 'JOIN TaskRelease 	ON (Task.releaseId 	= TaskRelease.id) '
	   	query += 'JOIN TaskCategory ON (Task.categoryId = TaskCategory.id) '
	   	query += 'JOIN UserExt 		ON (Task.reporterId = UserExt.userId )'
		query += 'WHERE Task.id = ? '
		query += 'LIMIT 1'

		// Prepare the query.
		stmt = DB.prepare(query)

		// Grab the info.
		task = stmt.getRow(taskId)
		self.id 	  	 = task['id']
		self.projectId	 = task['projectId']	
		self.dateCreated = task['dateCreated']
		self.dateUpdated = task['dateUpdated']
		self.summary  	 = task['summary']
		self.description = task['description']
		self.priority 	 = task['priority']
		self.priorityId	 = task['priorityId']
		self.status	  	 = task['status']
		self.statusId	 = task['statusId']
		self.statusColor = task['statusColor']
		self.release  	 = task['release']
		self.releaseId	 = task['releaseId']
		self.category 	 = task['category']
		self.categoryId	 = task['categoryId']
		self.reporter 	 = task['reporter']
		self.reporterId	 = task['reporterId']
		self.assignedId	 = []

		// Check whether this task is closed.
		query  = 'SELECT true '
		query += 'FROM TaskStatus '
		query += 'WHERE id 			  = ? '
		query += 'AND 	closedContext = ? '
		stmt = DB.prepare(query)
		self.closed = stmt.getOne(self.statusId, 1)

		// Select users assigned to this task.
		query  = 'SELECT UserExt.fullname, '
		query += '		 UserExt.userId '
	    query += 'FROM LinkUserTask AS LUT '
	    query += 'JOIN UserExt ON (LUT.userId = UserExt.userId) '
		query += 'WHERE LUT.taskId = ? '
		stmt = DB.prepare(query)
		rows = stmt.getRowArray(taskId)
		for r in rows
			self.assigned   += r.fullname	
			self.assignedId += r.userId
		end
	end

	/**
	 * Determines if this task is valid and its changes can be commited.
	 * 
	 * @public
	 * @return RuntimeError on error(can be bool compared), true on success.
	 */
	function verify()
		if typeOf(self.projectId) != IntegerType or self.projectId == 0
			return RuntimeError('Project Id is not an integer or is 0.')
		elif typeOf(self.categoryId) != IntegerType or self.categoryId == 0
			return RuntimeError('Category Id is not an integer or is 0.')
		elif typeOf(self.statusId) != IntegerType or self.statusId == 0
			return RuntimeError('Status Id is not an integer or is 0.')
		elif typeOf(self.priorityId) != IntegerType or self.priorityId == 0
			return RuntimeError('Priority Id is not an integer or is 0.')
		elif typeOf(self.releaseId) != IntegerType or self.releaseId == 0
			return RuntimeError('Release Id is not an integer or is 0.')
		elif typeOf(self.summary) != StringType or self.summary.len() == 0
			return RuntimeError('Summary must be a string a cannot be empty.')
		elif typeOf(self.description) != StringType or self.description.len() == 0
			return RuntimeError('Description must be a string a cannot be empty.')
		elif typeOf(self.assignedId) != ArrayType or self.assignedId.len() == 0
			return RuntimeError('assignedId must be an array of user ids and not empty.')
		elif not self.id and (typeOf(self.reporterId) != IntegerType or self.reporterId == 0)
			return RuntimeError('Reporter Id is not an integer or is 0.')
		end

		return true
	end

	/**
	  * Commit the changes that have been made to task.
	  *
	  * If this task doesn't exist, a new task will be created with the
	  * values present in this task. If this task already exists, it's
	  * values will be updated. We know if this is an existing task if
	  * it has a task id.
	  *
	  * @public
	  * @return nil
	  */
	function commit()
		// FIXME: Uncomment this as soon as possible.
		// Make sure this task is correct.
		//if (result = self.verify()) == false : raise result

		// Insert a new task or update the current one.
		if self.id
			self._update()
		else
			self._insert()
		end
	 end


	/**
	 * Create a new task.
	 * 
	 * @private
	 * @return nil
	 */
	 function _insert()
		query  = 'INSERT INTO Task (' 
		query += '	projectId, '
		query += '	categoryId, '
		query += '	statusId, '
		query += '	priorityId, '
		query += '	releaseId, '
		query += '	reporterId, '
		query += '	dateCreated, '
		query += '	summary, '
		query += '	description '
		query += ') VALUES(?, ?, ?, ?, ?, ?, NOW(), ?, ?)'

		// Prepare the query.
		stmt = DB.prepare(query)

		// Insert the record.
		stmt.write(
			self.projectId,
			self.categoryId,
			self.statusId,
			self.priorityId,
			self.releaseId,
			self.reporterId,
			self.summary,
			self.description
		)

	 	// Get the last auto-increment id automatically inserted by the DB.
		taskId = stmt.getLastAutoId()

		// Insert link from the users assigned to the task.
		query  = 'INSERT INTO LinkUserTask(userId, TaskId) '
		query += 'VALUES '
		values = []
		for userId in self.assignedId
			values += userId
			values += taskId
			query  += '(?, ?)'
		end
		stmt = DB.prepare(query)
		stmt.write(values)

		// Load my db values.
		self._fill(taskId)
	 end

	 /**
	  * Update the info of this task.
	  *
	  * @private
	  * @return nil
	  */
	 function _update()
		query  = 'UPDATE Task SET '
		query += 'categoryId = ?, statusId = ?, priorityId = ?, '
		query += 'releaseId = ?, summary = ?, description = ? '
		query += 'WHERE id = ?'

		stmt = DB.prepare(query)
		stmt.write(self.categoryId, 
					self.statusId, 
					self.priorityId,
					self.releaseId, 
					self.summary, 
					self.description,
					self.id)

	 end

	/********************* STATICS *************************/

	/**
	 * Create a task based on a dictionary of values.
	 *
	 * @static
	 * @public
	 * @param	Dictionary	data - The data representing the task to create.
	 * return 	Task
	 */ 
	function factory(data)
		task = Task()
		task.id 		  = data['id']
		task.dateCreated  = data['dateCreated']
		task.dateUpdated  = data['dateUpdated']
		task.priority 	  = data['priority']
		task.status 	  = data['status']
		task.statusColor  = data['statusColor']
		task.release  	  = data['release']
		task.category 	  = data['category']
		task.reporter 	  = data['reporter']
		task.closed		  = false
		task.assigned 	  = data['assigned']

		task.projectId	 = data['projectId']
		task.priorityId	 = data['priorityId']
		task.statusId	 = data['statusId']
		task.releaseId	 = data['releaseId']
		task.categoryId	 = data['categoryId']
		task.reporterId	 = data['reporterId']
		task.assignedId	 = data['assignedId']
		task.summary  	 = data['summary']
		task.description = data['description']

		// FIXME:
		// if (result = task.verify()) != true : raise result

		return task
	end

	/**
	 * Check whether a given task exists.
	 *
	 * @static
	 * @public
	 * @return boolean
	 */
	function exists(taskId)
		query  = 'SELECT true '
		query += 'FROM Task ' 
		query += 'WHERE id = ? '

		// Prepare the query.
		stmt = DB.prepare(query)

		return stmt.getOne(taskId)
	end

end
